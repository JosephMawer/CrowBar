@using CrowBar.Models;


@inject CrowBar.Data.ApplicationDbContext _db;

@* This is a child component - its parent is Menu.razor (page) *@

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Main.Name</h2>
            @Main.Description
        </div>
        <form class="dialog-body">

            <div>
                <label>Add A Side:</label>
                @if (Sides != null)
                {
                    <select class="custom-select" @onchange="SideSelected">
                        <option value="-1" disabled selected>(select)</option>
                        @for (var i = 0; i < Sides.Count; i++)
                        {
                            <option value="@i">@Sides[i].Name - ($@(Sides[i].Price))</option>
                        }
                    </select>
                }
            </div>
            <div>
                <label>Add A Drink:</label>
                @if (Drinks != null)
                {
                    <select class="custom-select" @onchange="DrinkSelected">
                        <option value="-1" disabled selected>(select)</option>
                        @for (var i = 0; i < Drinks.Count; i++)
                        {
                            <option value="@i">@Drinks[i].Name - ($@(Drinks[i].Price))</option>
                        }
                    </select>
                }
            </div>
            <div>
                <label>Add a note:</label>
               
                <input @onchange="UpdateNote"/>
                   
                
            </div>


            @*<div class="toppings">
            @foreach (var side in Sides)
            {
                <div class="topping">
                    @side.Name
                    <span class="topping-price">@side.Price</span>
                    <button type="button" class="delete-topping" @onclick="@(() => RemoveSide(side))">x</button>
                </div>
            }
        </div>*@

        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(Main.Price)</span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order ></button>
        </div>
    </div>
</div>


@code {
    [Parameter] public Main Main { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    protected override void OnInitialized()
    {
        Sides = _db.Sides.ToList();
        Drinks = _db.Drinks.ToList();
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    List<Side> Sides { get; set; } = new List<Side>();
    List<Drink> Drinks { get; set; } = new List<Drink>();

    void SideSelected(ChangeEventArgs e) {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
            AddSide(Sides[index]);
    }

    void DrinkSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
            AddDrink(Drinks[index]);
    }

    void UpdateNote(ChangeEventArgs e)
    {
        var msg = e.Value.ToString();
        Main.Note = msg;
    }

    void AddDrink(Drink drink) => Main.Drink = drink;
    void RemoveDrink() => Main.Drink = null;

    void AddSide(Side side) => Main.Sides= side;
    void RemoveSide() => Main.Sides = null;
}
