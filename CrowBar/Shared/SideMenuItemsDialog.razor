
@using CrowBar.Models;

    <div class="dialog-container">
        <div class="dialog">
            <div class="dialog-title">
                <h2>@Item.Name</h2>
                @Item.Description
            </div>
            <form class="dialog-body">

                <div>
                    <label>Add a side:</label>
                    @if (Sides == null)
                    {
                        <select class="custom-select" disabled>
                            <option>(loading...)</option>
                        </select>
                    }
                    else
                    {
                        <select class="custom-select" @onchange="SideItemSelected">
                            <option value="-1" disabled selected>(select)</option>
                            @for (var i = 0; i < Sides.SideItems.Count; i++)
                            {
                                // I guess <option /> is a combo box.. cool
                                <option value="@i">@Sides.SideItems[i].Name - (£@(Sides.SideItems[i].Price))</option>
                            }
                        </select>
                    }
                </div>

                
                <div class="toppings">
                    @foreach (var side in Sides.SideItems)
                    {
                        <div class="topping">
                            @side.Name
                            <span class="topping-price">@side.Price</span>
                            <button type="button" class="delete-topping" @onclick="@(() => RemoveTopping(side))">x</button>
                        </div>
                    }
                </div>

            </form>
            <div class="dialog-buttons">
                <button class="btn btn-secondary mr-auto">Cancel</button>
                <span class="mr-center">
                    Price: <span class="price">@(Item.GetFormattedBasePrice())</span>
                </span>
                <button class="btn btn-success ml-auto">Order ></button>
            </div>
        </div>
    </div>

@code {
    [Parameter] public MenuItem Item { get; set; }

    // todo: replace this with a database call (soon)...
    private Sides Sides { get; set; } = new Sides();

    void SideItemSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddTopping(Sides.SideItems[index]);
        }
    }



    void AddTopping(SideMenuItem side)
    {
        Item.Sides.Add(side);
    }

    void RemoveTopping(SideMenuItem side)
    {
        Item.Sides.RemoveAll(pt => pt.Name == side.Name);
    }

}
