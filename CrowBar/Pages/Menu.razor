@page "/menu"

@using CrowBar.Models;


<div class="main">
    <ul class="pizza-cards">
        @if (menu != null)
        {
            @foreach (var menuItem in menu)
            {
                <li @onclick="@(() => ShowSideMenuItemsDialog(menuItem))" style="background-image: url('@menuItem.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@menuItem.Name</span>
                        @menuItem.Description
                        <span class="price">@menuItem.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Items.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var menuItem in order.Items)
            {
                <OrderMenu OrderItem="menuItem" OnRemoved="@(() => RemoveConfiguredPizza(menuItem))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Items.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedBasePrice()</span>
        <button class="btn btn-warning" disabled="@(order.Items.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (showDialog)
{
    <SideMenuItemsDialog 
                Item=selectedItem 
                OnCancel="CancelDialog" 
                OnConfirm="ConfirmDialog"/>
}


@code {

    MenuItem selectedItem;
    OrderItem order = new OrderItem();
    bool showDialog;


    void ShowSideMenuItemsDialog(MenuItem item)
    {

        selectedItem = item;
        showDialog = true;
    }

    private IList<MenuItem> menu = new List<MenuItem>()
    {
        new MenuItem() {Name = "Chicken Burger", Description = "Try our savoury fire roasted chicken tequilla with black peppermint and chipotle sauce with a side of delicisous oven roosted roosters!"},
        new MenuItem() {Name = "Bean Burger", Description = "Try our savoury fire roasted chicken tequilla with black peppermint and chipotle sauce with a side of delicisous oven roosted roosters!"},
        new MenuItem() {Name = "Poutine", Description = "Try our mouth watering poutine and gravy with cheese from Empire!"},
        new MenuItem() {Name = "Salad", Description = "Try our savoury fire roasted chicken tequilla with black peppermint and chipotle sauce with a side of delicisous oven roosted roosters!"},
        new MenuItem() {Name = "Hot Dog", Description = "Get your delicious frankenfurt style sausage!"},
        new MenuItem() {Name = "Hamburger With Bacon", Description = "Try our savoury fire roasted chicken tequilla with black peppermint and chipotle sauce with a side of delicisous oven roosted roosters!"}
    };

    // Now when you click the dialog's Cancel button, Index.CancelDialog will execute, and then the 
    // Index component will rerender itself. Since showingConfigureDialog is now false the dialog will not be displayed.
    
    void CancelDialog()
    {
        selectedItem = null;
        showDialog = false;
    }

    void ConfirmDialog()
    {
        order.Items.Add(selectedItem);
        selectedItem = null;

        showDialog = false;
    }
    void RemoveConfiguredPizza(MenuItem pizza)
    {
        order.Items.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        order = new OrderItem();
        await Task.CompletedTask; // add this for now so vs code stops complaining at me
    }
}
