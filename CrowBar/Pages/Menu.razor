@page "/menu"

@using CrowBar.Models;

@inject CrowBar.Data.ApplicationDbContext _db;


    <div class="main">
        @* toggle between menu/sides/drinks*@
        <div class="menu-buttons">
            <button class="btn btn-success ml-auto" @onclick="ShowMains">Mains</button>
            <button class="btn btn-success ml-auto" @onclick="ShowSides">Sides</button>
            <button class="btn btn-success ml-auto" @onclick="ShowSides">Drinks</button>
        </div>

        <ul class="menu-cards">
            @if (showMainMenu)
            {
                @if (menu != null)
                {
                    @foreach (var menuItem in menu)
                    {
                        <li @onclick="@(() => ShowSideMenuItemsDialog(menuItem))" style="background-image: url('@menuItem.ImageUrl')">
                            <div class="pizza-info">
                                <span class="title">@menuItem.Name</span>
                                @menuItem.Description
                                <span class="price">@menuItem.Price</span>
                            </div>
                        </li>
                    }
                }
            }
            else
            {
                @if (sides != null)
                {
                    @foreach (var side in sides)
                    {
                        <li>
                            <div class="pizza-info">
                                <span class="title">@side.Name</span>
                                @side.Description
                                <span class="price">@side.Price</span>
                            </div>
                        </li>
                    }
                }
            }

        </ul>
    </div>


@* This is the side bar component that displays all your orders *@
<div class="sidebar">
    @if (order.Mains.Any() || order.Sides.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var main in order.Mains)
            {
                <OrderMenu Main="main"
                           OnRemoved="@(() => RemoveOrder(main))" />
            }


        </div>
    }
    else
    {
        <div class="empty-cart">Choose from our menu<br>to get started</div>
    }

    <div class="order-total @(order.Mains.Any() || order.Sides.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedBasePrice()</span>
        <button class="btn btn-warning" disabled="@(order.Mains.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (showDialog)
{
    <SideMenuItemsDialog Main="selectedItem"
                         OnCancel="CancelDialog"
                         OnConfirm="ConfirmDialog" />
}


@code {

    Main selectedItem;
    Order order = new Order();
    bool showDialog, showMainMenu;
    IList<Main> menu;
    IList<Side> sides;
    void ShowSideMenuItemsDialog(Main item)
    {

        selectedItem = item;
        showDialog = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        menu = _db.Mains.ToList();
        showMainMenu = true;
        sides = _db.Sides.ToList();
    }

    // Now when you click the dialog's Cancel button, Index.CancelDialog will execute, and then the
    // Index component will rerender itself. Since showingConfigureDialog is now false the dialog will not be displayed.

    void CancelDialog()
    {
        selectedItem = null;
        showDialog = false;
    }

    void ConfirmDialog()
    {
        
        order.Mains.Add(selectedItem);
        selectedItem = null;

        showDialog = false;
    }
    void RemoveOrder(Main main)
    {
        order.Mains.Remove(main);
    }

    async Task PlaceOrder()
    {
        _db.Orders.Add(order);
        _db.SaveChanges();
        order = new Order();
    }

    // toggles between main and side menu
    void ShowMains() => showMainMenu = true;
    void ShowSides() => showMainMenu = false;
}
