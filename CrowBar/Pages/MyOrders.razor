@page "/myorders"

@using CrowBar.Models;
@using Microsoft.AspNetCore.Http;
@using System.Linq;

@inject IHttpContextAccessor HttpContextAccessor;
@inject Microsoft.AspNetCore.Identity.UserManager<CrowBar.Areas.Identity.Data.CrowBarUser> _userManager;
@inject CrowBar.Data.CrowBarContext _db;

@attribute [Authorize(Roles = "Administrator, Owner, Customer")]

<div class="main">
    @if (orders == null)
    {
        <text>Loading...</text>
    }
    else if (!orders.Any())
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="/menu">Order some pizza</a>
    }
    else
    {
        @* It looks like a lot of code, but there's nothing special here. It simply uses a
            @foreach to iterate over the ordersWithStatus and outputs a <div> for each one. *@
        <div class="list-group orders-list">
            @foreach (var order in orders)
                {
                    <div class="list-group-item">
                        <div class="col">
                            <h5>@order.CreatedTime.ToLongDateString()</h5>
                            Items:
                            <strong>@order.OrderItems.Count</strong>;
                            Total price:
                            <strong>$@order.GetFormattedBasePrice()</strong>
                        </div>
                        <div class="col">
                            Status: <strong>@order.OrderStatus</strong>
                        </div>
                        <div class="col flex-grow-0">
                            <a href="myorders/@order.OrderId" class="btn btn-success">
                                Track &gt;
                            </a>
                        </div>
                    </div>
                }
        </div>
    }
</div>



@code {
    IEnumerable<Order> orders;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        var userClaim = HttpContextAccessor.HttpContext.User;
        var user = await _userManager.GetUserAsync(userClaim);

        orders = _db.Orders.Where(x => x.User.Id == user.Id)
                           .OrderByDescending(x => x.CreatedTime);   // todo: filter for 'active' orders

    }
}
